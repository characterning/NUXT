1.资源目录（assets）
  资源目录用于组织未编译的静态资源 如Less、Sass或Javascript

2.组件目录（components）
  组件目录 components 用于组织应用的 Vue.js 组件。Nuxt.js 不会扩展增强该目录下 Vue.js 组件，即这些组件不会像页面组件那样有 asyncData 方法的特性

3.布局目录（layouts）用于组织应用的布局组件
  布局目录 layouts 用于组织应用的布局组件

4.中间件目录（middleware）
  middleware 目录用于存放应用的中间件

5.页面目录（pages）
  页面目录 pages 用于组织应用的路由及视图。Nuxt.js 框架读取该目录下所有的 .vue 文件并自动生成对应的路由配置。

6.插件目录（plugins）
  插件目录 plugins 用于组织那些需要在 根vue.js应用 实例化之前需要运行的 Javascript 插件。

7.静态文件目录（static）
  静态文件目录 static 用于存放应用的静态文件，此类文件不会被 Nuxt.js 调用 Webpack 进行构建编译处理。 服务器启动的时候，该目录下的文件会映射至应用的根路径 / 下。

8.Store目录
  store 目录用于组织应用的 Vuex 状态树 文件。 Nuxt.js 框架集成了 Vuex 状态树 的相关功能配置，在 store 目录下创建一个 index.js 文件可激活这些配置。

9.nuxt.config.js 文件
  nuxt.config.js 文件用于组织Nuxt.js 应用的个性化配置，以便覆盖默认配置。

10.package.json文件
   package.json文件用于描述应用的依赖关系和对外暴露的脚本接口

----------------------------------------------------------------------------------------------------------------------------------
文件中的别名
别名	                目录

~	                 /

~assets	                 /assets

~components	         /components

~pages	                 /pages

~plugins	         /plugins

~static	                 /static

~store	                 /store
。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。

别名	               使用方法	                                     描述

~store	               const store = require('~store')	          导入 vuex 状态树实例

~router	               const router = require('~router')	  导入 vue-router 实例


